(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[14],{"9kvl":function(e,r,n){"use strict";var t=n("FfOG");n.d(r,"a",(function(){return t["b"]}));n("bCY9")},afA6:function(e,r,n){"use strict";n.r(r);var t=n("0Owb"),o=n("q1tI"),a=n.n(o),s=n("q3YX"),i=n("qLMh"),l=n("9og8"),u=n("LtsZ"),m='// import React, { useState } from \'react\';\r\nimport React, { Component, Fragment } from \'react\';\r\nimport { CusButton } from \'dumi-antd-componentshyh\';\r\nimport { Button } from \'antd\';\r\n\r\nfunction cusButtonDemo() {\r\n    return (\r\n        <div>\r\n            <CusButton type="primary" style={{marginRight:"10px"}} onClick={() => alert(5566)}>\u6309\u94ae1</CusButton>\r\n            <CusButton shape="circle" icon="search" style={{marginRight:"10px"}} />\r\n            <CusButton type="danger" style={{marginRight:"10px"}}>\u6309\u94ae3</CusButton>\r\n            <Button type="primary">antd\u6309\u94ae1</Button>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default cusButtonDemo;',c="import React, { Component, Fragment } from 'react';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Icon,\r\n    Cascader,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Button,\r\n    AutoComplete,\r\n  } from 'antd';\r\n\r\n  const { Option } = Select;\r\n  const AutoCompleteOption = AutoComplete.Option;\r\n\r\n  const residences = [\r\n    {\r\n      value: 'zhejiang',\r\n      label: 'Zhejiang',\r\n      children: [\r\n        {\r\n          value: 'hangzhou',\r\n          label: 'Hangzhou',\r\n          children: [\r\n            {\r\n              value: 'xihu',\r\n              label: 'West Lake',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      value: 'jiangsu',\r\n      label: 'Jiangsu',\r\n      children: [\r\n        {\r\n          value: 'nanjing',\r\n          label: 'Nanjing',\r\n          children: [\r\n            {\r\n              value: 'zhonghuamen',\r\n              label: 'Zhong Hua Men',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n  \r\nclass RegistrationForm extends Component {\r\nstate = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: [],\r\n};\r\n\r\nhandleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n    if (!err) {\r\n        console.log('Received values of form: ', values);\r\n    }\r\n    });\r\n};\r\n\r\nhandleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n};\r\n\r\ncompareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n    callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n    callback();\r\n    }\r\n};\r\n\r\nvalidateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n    form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n};\r\n\r\nhandleWebsiteChange = value => {\r\n    let autoCompleteResult;\r\n    if (!value) {\r\n    autoCompleteResult = [];\r\n    } else {\r\n    autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n    }\r\n    this.setState({ autoCompleteResult });\r\n};\r\n\r\nrender() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { autoCompleteResult } = this.state;\r\n\r\n    const formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n    },\r\n    };\r\n    const tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n        span: 24,\r\n        offset: 0,\r\n        },\r\n        sm: {\r\n        span: 16,\r\n        offset: 8,\r\n        },\r\n    },\r\n    };\r\n    const prefixSelector = getFieldDecorator('prefix', {\r\n    initialValue: '86',\r\n    })(\r\n    <Select style={{ width: 70 }}>\r\n        <Option value=\"86\">+86</Option>\r\n        <Option value=\"87\">+87</Option>\r\n    </Select>,\r\n    );\r\n\r\n    const websiteOptions = autoCompleteResult.map(website => (\r\n    <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\r\n    ));\r\n\r\n    return (\r\n    <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n        <Form.Item label=\"E-mail\">\r\n        {getFieldDecorator('email', {\r\n            rules: [\r\n            {\r\n                type: 'email',\r\n                message: 'The input is not valid E-mail!',\r\n            },\r\n            {\r\n                required: true,\r\n                message: 'Please input your E-mail!',\r\n            },\r\n            ],\r\n        })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Password\" hasFeedback>\r\n        {getFieldDecorator('password', {\r\n            rules: [\r\n            {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n            },\r\n            {\r\n                validator: this.validateToNextPassword,\r\n            },\r\n            ],\r\n        })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" hasFeedback>\r\n        {getFieldDecorator('confirm', {\r\n            rules: [\r\n            {\r\n                required: true,\r\n                message: 'Please confirm your password!',\r\n            },\r\n            {\r\n                validator: this.compareToFirstPassword,\r\n            },\r\n            ],\r\n        })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n        label={\r\n            <span>\r\n            Nickname&nbsp;\r\n            <Tooltip title=\"What do you want others to call you?\">\r\n                <Icon type=\"question-circle-o\" />\r\n            </Tooltip>\r\n            </span>\r\n        }\r\n        >\r\n        {getFieldDecorator('nickname', {\r\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\r\n        })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Habitual Residence\">\r\n        {getFieldDecorator('residence', {\r\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\r\n            rules: [\r\n            { type: 'array', required: true, message: 'Please select your habitual residence!' },\r\n            ],\r\n        })(<Cascader options={residences} />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Phone Number\">\r\n        {getFieldDecorator('phone', {\r\n            rules: [{ required: true, message: 'Please input your phone number!' }],\r\n        })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Website\">\r\n        {getFieldDecorator('website', {\r\n            rules: [{ required: true, message: 'Please input website!' }],\r\n        })(\r\n            <AutoComplete\r\n            dataSource={websiteOptions}\r\n            onChange={this.handleWebsiteChange}\r\n            placeholder=\"website\"\r\n            >\r\n            <Input />\r\n            </AutoComplete>,\r\n        )}\r\n        </Form.Item>\r\n        <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n        <Row gutter={8}>\r\n            <Col span={12}>\r\n            {getFieldDecorator('captcha', {\r\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\r\n            })(<Input />)}\r\n            </Col>\r\n            <Col span={12}>\r\n            <Button>Get captcha</Button>\r\n            </Col>\r\n        </Row>\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n        {getFieldDecorator('agreement', {\r\n            valuePropName: 'checked',\r\n        })(\r\n            <Checkbox>\r\n            I have read the <a href=\"\">agreement</a>\r\n            </Checkbox>,\r\n        )}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n        </Button>\r\n        </Form.Item>\r\n    </Form>\r\n    );\r\n}\r\n}\r\nconst WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\r\n\r\nexport default () => <WrappedRegistrationForm></WrappedRegistrationForm>;",p={"cusbutton-demos":{component:Object(u["dynamic"])({loader:function(){var e=Object(l["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(3),n.e(7)]).then(n.bind(null,"JiN9"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function r(){return e.apply(this,arguments)}return r}(),loading:()=>null}),previewerProps:{sources:{_:{jsx:m}},dependencies:{antd:{version:"^3.26.14",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"dumi-antd-componentshyh":{version:"1.0.1"},"react-dom":{version:">=16.9.0"}},componentName:"CusButton",identifier:"cusbutton-demos"}},"Foo-demo":{component:Object(u["dynamic"])({loader:function(){var e=Object(l["a"])(Object(i["a"])().mark((function e(){var r,t,o;return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return r=n("K+nK")["default"],e.t0=r,e.next=4,Promise.resolve().then(n.t.bind(null,"q1tI",7));case 4:return e.t1=e.sent,t=(0,e.t0)(e.t1),e.next=8,Promise.all([n.e(3),n.e(15)]).then(n.bind(null,"/7QA"));case 8:return o=e.sent,e.abrupt("return",(function(){return t["default"].createElement(o.Foo,{title:"First Demo"})}));case 10:case"end":return e.stop()}}),e)})));function r(){return e.apply(this,arguments)}return r}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:"import React from 'react';\nimport { Foo } from 'dumi-antd-componentshyh';\n\nexport default () => <Foo title=\"First Demo\" />;"}},dependencies:{react:{version:">=16.9.0"},"dumi-antd-componentshyh":{version:"1.0.1"},antd:{version:"^3.26.14",css:"antd/dist/antd.css"},"react-dom":{version:">=16.9.0"}},componentName:"Foo",identifier:"Foo-demo"}},"form-demos":{component:Object(u["dynamic"])({loader:function(){var e=Object(l["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(1),n.e(3),n.e(12),n.e(6)]).then(n.bind(null,"CtE+"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function r(){return e.apply(this,arguments)}return r}(),loading:()=>null}),previewerProps:{sources:{_:{jsx:c}},dependencies:{antd:{version:"3.26.20",css:"antd/dist/antd.css"},react:{version:">=16.0.0"},"react-dom":{version:">=16.0.0"}},componentName:"form",identifier:"form-demos"}}},d=n("x2v5"),h=n("KcUY"),f=n.n(h);r["default"]=e=>a.a.createElement(f.a,Object(t["a"])({},e,{config:s,demos:p,apis:d}))},q3YX:function(e){e.exports=JSON.parse('{"menus":{"en-US":{"/components":[{"title":"\u7ec4\u4ef6","path":"/components","meta":{},"children":[{"path":"/components/cus-button","title":"cusButton","meta":{}},{"path":"/components/foo","title":"Foo","meta":{}},{"path":"/components/form","title":"form\u8868\u5355","meta":{}}]}],"*":[{"path":"/","title":"Hello dumi-antd-componentshyh!","meta":{}}]}},"locales":[{"name":"en-US","label":"English"}],"navs":{"en-US":[{"title":"\u7ec4\u4ef6","path":"/components"},{"title":"GitHub","path":"https://github.com/huang1234567/dumi-antd-componentshyh"}]},"title":"Ant Design Power","logo":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","mode":"site","repository":{"url":"https://github.com/huang1234567/dumi-antd-componentshyh","branch":"master"},"theme":{}}')},x2v5:function(e){e.exports=JSON.parse('{"api":{"CusButton":[{"identifier":"title","description":"\u5c5e\u6027\u540d\u79f0","type":"string","default":"\\"\u65e0\\""}]},"form":{"default":[{"identifier":"title","description":"\u5c5e\u6027\u540d\u79f0","type":"string","default":"\\"\u65e0\\""}]}}')}}]);